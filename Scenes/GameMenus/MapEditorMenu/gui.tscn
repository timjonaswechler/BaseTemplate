[gd_scene load_steps=8 format=3 uid="uid://b1gxxtfxgy5g2"]

[sub_resource type="Theme" id="Theme_5828x"]
default_font_size = 12

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_vx8ye"]
content_margin_left = 10.0
content_margin_top = 10.0
content_margin_right = 10.0
content_margin_bottom = 10.0
bg_color = Color(0.286275, 0.388235, 0.356863, 0.8)
corner_radius_top_left = 5
corner_radius_top_right = 5
corner_radius_bottom_right = 5
corner_radius_bottom_left = 5

[sub_resource type="GDScript" id="GDScript_3vq2s"]
script/source = "# Menu.gd
#---------------------------------
extends PanelContainer

#---------------------------------
@onready var g_map: Map = get_tree().root.get_node(\"MainMenu\").get_node(\"MapEditorContainer\").get_node(\"Control\").get_node(\"World\").get_node(\"Map\")

@onready var m_noise: FastNoise = $\"../FastNoise\"
@onready var m_cellular: Cellular = $\"../Cellular\"
@onready var m_domain: DomainWarp = $\"../DomainWarp\"
@onready var m_fractal: Fractal = $\"../Fractal\"

@onready var m_fileName: Label = $\"VBoxContainer/FileName\"

var m_openDialog: FileDialog = FileDialog.new()
var m_saveDialog: FileDialog = FileDialog.new()

const m_filePath: String = 'user://save/'

#---------------------------------
func _ready():
	set_filePath()
	print(g_map)
	m_fileName.set_text(g_map.m_data.m_fileName)
	
	add_child(m_openDialog)
	add_child(m_saveDialog)
	
	m_openDialog.add_filter('*.tres', 'MapData resource')
	m_saveDialog.add_filter('*.tres', 'MapData resource')
	
	m_openDialog.set_size(Vector2i(600, 400))
	m_saveDialog.set_size(Vector2i(600, 400))
	
	m_openDialog.set_position(Vector2i(300, 300))
	m_saveDialog.set_position(Vector2i(300, 300))

#---------------------------------
func set_filePath():
	if !(DirAccess.dir_exists_absolute(m_filePath)):
		DirAccess.make_dir_absolute(m_filePath)

	m_openDialog.set_access(FileDialog.ACCESS_USERDATA)
	m_saveDialog.set_access(FileDialog.ACCESS_USERDATA)
	
	m_openDialog.set_current_path(m_filePath)
	m_saveDialog.set_current_path(m_filePath)

#---------------------------------
func _on_open_pressed():
	m_openDialog.set_file_mode(FileDialog.FILE_MODE_OPEN_FILE)
	
	if !(m_openDialog.is_connected('file_selected', _on_open_file_selected)):
		m_openDialog.connect('file_selected', _on_open_file_selected)
		
	m_openDialog.show()

#---------------------------------
func _on_save_pressed():
	m_saveDialog.set_file_mode(FileDialog.FILE_MODE_SAVE_FILE)
	
	if !(m_saveDialog.is_connected('file_selected', _on_save_file_selected)):
		m_saveDialog.connect('file_selected', _on_save_file_selected)
	m_saveDialog.show()

#---------------------------------
func _on_open_file_selected(path):
	g_map.loadData(path)
	g_map.setScale()
	g_map.generateMap()
	m_fileName.set_text(g_map.m_data.m_fileName)
	
	m_noise.updateControls()
	m_cellular.updateControls()
	m_domain.updateControls()
	m_fractal.updateControls()

#---------------------------------
func _on_save_file_selected(path):
	g_map.saveData(path)
	m_fileName.set_text(g_map.m_data.m_fileName)

#---------------------------------
"

[sub_resource type="GDScript" id="GDScript_p47q3"]
script/source = "# Noise.gd
#---------------------------------
extends PanelContainer
class_name FastNoise 

#---------------------------------
@onready var g_map: Map = get_tree().root.get_node(\"MainMenu\").get_node(\"MapEditorContainer\").get_node(\"Control\").get_node(\"World\").get_node(\"Map\")

@onready var m_layersLabel: Label = $\"VBoxContainer/Layers/Label\"
@onready var m_layers: HSlider = $\"VBoxContainer/Layers/HSlider\"

@onready var m_mapSizeLabel: Label = $\"VBoxContainer/MapSize/Label\"
@onready var m_mapSize: HSlider = $\"VBoxContainer/MapSize/HSlider\"

@onready var m_noiseType: OptionButton = $\"VBoxContainer/NoiseType\"

@onready var m_seedLabel: Label = $\"VBoxContainer/Seed/Label\"
@onready var m_seed: HSlider = $\"VBoxContainer/Seed/HSlider\"

@onready var m_freqLabel: Label = $\"VBoxContainer/Frequency/Label\"
@onready var m_freq: HSlider = $\"VBoxContainer/Frequency/HSlider\"

#---------------------------------
func _ready():
	m_layers.grab_focus()
	
	m_layersLabel.set_text('layers: ' + str(g_map.m_data.m_layers))
	m_mapSizeLabel.set_text('map size: ' + str(g_map.m_data.m_mapSize))
	
	m_noiseType.add_item('noise type simplex', FastNoiseLite.NoiseType.TYPE_SIMPLEX)
	m_noiseType.add_item('noise type simplex smooth', FastNoiseLite.NoiseType.TYPE_SIMPLEX_SMOOTH)
	m_noiseType.add_item('noise type cellular', FastNoiseLite.NoiseType.TYPE_CELLULAR)
	m_noiseType.add_item('noise type perlin', FastNoiseLite.NoiseType.TYPE_PERLIN)
	m_noiseType.add_item('noise type cubic', FastNoiseLite.NoiseType.TYPE_VALUE_CUBIC)
	m_noiseType.add_item('noise type value', FastNoiseLite.NoiseType.TYPE_VALUE)
	m_noiseType.select(g_map.m_noise.get_noise_type())
	
	m_seedLabel.set_text('seed: ' + str(g_map.m_noise.get_seed()))
	m_freqLabel.set_text('frequency: ' + str( \"%.3f\" % g_map.m_noise.get_frequency()))
	
	updateControls()

#---------------------------------
func updateControls():
	m_layers.set_value(g_map.m_data.m_layers)
	m_mapSize.set_value(g_map.m_data.m_mapSize.x)
	m_noiseType.select(g_map.m_noise.get_noise_type())
	m_seed.set_value(g_map.m_noise.get_seed())
	m_freq.set_value(g_map.m_noise.get_frequency())

#---------------------------------
func _on_layers_value_changed(value):
	g_map.m_data.m_layers = value
	g_map.generateMap()
	m_layersLabel.set_text('layers: ' + str(g_map.m_data.m_layers))

#---------------------------------
func _on_mapSize_value_changed(value):
	g_map.m_data.set_mapSize(value)
	g_map.setScale()
	g_map.generateMap()
	m_mapSizeLabel.set_text('map size: ' + str(g_map.m_data.m_mapSize))

#---------------------------------
func _on_noiseType_item_selected(index):
	g_map.m_data.m_noiseType = index
	g_map.generateMap()
	m_noiseType.select(g_map.m_noise.get_noise_type())

#---------------------------------
func _on_seed_value_changed(value):
	g_map.m_data.m_seed = value
	g_map.generateMap()
	m_seedLabel.set_text('seed: ' + str(g_map.m_noise.get_seed()))

#---------------------------------
func _on_frequency_value_changed(value):
	g_map.m_data.m_freq = value
	g_map.generateMap()
	m_freqLabel.set_text('frequency: ' + str( \"%.3f\" % g_map.m_noise.get_frequency()))
"

[sub_resource type="GDScript" id="GDScript_r2nii"]
script/source = "# Fractal.gd
#---------------------------------
class_name Fractal extends PanelContainer

#---------------------------------
@onready var g_map: Map = get_tree().root.get_node(\"MainMenu\").get_node(\"MapEditorContainer\").get_node(\"Control\").get_node(\"World\").get_node(\"Map\")

@onready var m_fractalType: OptionButton = $\"VBoxContainer/OptionButton\"

@onready var m_octavesLabel: Label = $\"VBoxContainer/Octaves/Label\"
@onready var m_lacunarityLabel: Label = $\"VBoxContainer/Lacunarity/Label\"
@onready var m_gainLabel: Label = $\"VBoxContainer/Gain/Label\"
@onready var m_weightLabel: Label = $\"VBoxContainer/Weight/Label\"
@onready var m_pingpongLabel: Label = $\"VBoxContainer/Pingpong/Label\"

@onready var m_octaves: HSlider = $\"VBoxContainer/Octaves/HSlider\"
@onready var m_lacunarity: HSlider = $\"VBoxContainer/Lacunarity/HSlider\"
@onready var m_gain: HSlider = $\"VBoxContainer/Gain/HSlider\"
@onready var m_weight: HSlider = $\"VBoxContainer/Weight/HSlider\"
@onready var m_pingpong: HSlider = $\"VBoxContainer/Pingpong/HSlider\"

#---------------------------------
func _ready():
	# add items to optionBox
	m_fractalType.add_item('fractal none', FastNoiseLite.FractalType.FRACTAL_NONE)
	m_fractalType.add_item('fractal fbm', FastNoiseLite.FractalType.FRACTAL_FBM)
	m_fractalType.add_item('fractal ridged', FastNoiseLite.FractalType.FRACTAL_RIDGED)
	m_fractalType.add_item('fractal ping pong', FastNoiseLite.FractalType.FRACTAL_PING_PONG)
	
	# init labels to default values
	m_octavesLabel.set_text('octaves: ' + str(g_map.m_noise.get_fractal_octaves()))
	m_lacunarityLabel.set_text('lacunarity: ' + str(g_map.m_noise.get_fractal_lacunarity()))
	m_gainLabel.set_text('gain: ' + str(g_map.m_noise.get_fractal_gain()))
	m_weightLabel.set_text('weight: ' + str(g_map.m_noise.get_fractal_weighted_strength()))
	m_pingpongLabel.set_text('pingpong: ' + str(g_map.m_noise.get_fractal_ping_pong_strength()))
	
	updateControls()
	
#---------------------------------
func updateControls():
	m_fractalType.select(g_map.m_noise.get_fractal_type())
	m_octaves.set_value(g_map.m_noise.get_fractal_octaves())
	m_lacunarity.set_value(g_map.m_noise.get_fractal_lacunarity())
	m_gain.set_value(g_map.m_noise.get_fractal_gain())
	m_weight.set_value(g_map.m_noise.get_fractal_weighted_strength())
	m_pingpong.set_value(g_map.m_noise.get_fractal_ping_pong_strength())
	
#---------------------------------
func _on_fractalType_item_selected(index):
	g_map.m_data.m_fractalType = index
	g_map.generateMap()
	m_fractalType.select(g_map.m_noise.get_fractal_type())

#---------------------------------
func _on_octave_value_changed(value):
	g_map.m_data.m_fractalOctaves = value
	g_map.generateMap()
	m_octavesLabel.set_text('octaves: ' + str(g_map.m_noise.get_fractal_octaves()))

#---------------------------------
func _on_lacunarity_value_changed(value):
	g_map.m_data.m_fractalLacunarity = value
	g_map.generateMap()
	m_lacunarityLabel.set_text('lacunarity: ' + str(\"%.3f\" % g_map.m_noise.get_fractal_lacunarity()))

#---------------------------------
func _on_gain_value_changed(value):
	g_map.m_data.m_fractalGain = value
	g_map.generateMap()
	m_gainLabel.set_text('gain: ' + str(\"%.3f\" % g_map.m_noise.get_fractal_gain()))

#---------------------------------
func _on_weight_value_changed(value):
	g_map.m_data.m_fractalWeightedStrength = value
	g_map.generateMap()
	m_weightLabel.set_text('weight: ' + str(\"%.3f\" % g_map.m_noise.get_fractal_weighted_strength()))

#---------------------------------
func _on_pingpong_value_changed(value):
	g_map.m_data.m_fractalPingPongStrength = value
	g_map.generateMap()
	m_pingpongLabel.set_text('pingpong: ' + str(\"%.3f\" % g_map.m_noise.get_fractal_ping_pong_strength()))
	
"

[sub_resource type="GDScript" id="GDScript_varu0"]
script/source = "# Cellular.gd
#---------------------------------
class_name Cellular extends PanelContainer

#---------------------------------
@onready var g_map: Map = get_tree().root.get_node(\"MainMenu\").get_node(\"MapEditorContainer\").get_node(\"Control\").get_node(\"World\").get_node(\"Map\") 

@onready var m_returnType: OptionButton = $\"VBoxContainer/ReturnType\"
@onready var m_distanceFunction: OptionButton = $\"VBoxContainer/DistanceFunction\"

@onready var m_jitterLabel: Label = $\"VBoxContainer/Jitter/Label\"
@onready var m_jitter: HSlider = $\"VBoxContainer/Jitter/HSlider\"

#---------------------------------
func _ready():
	# add items to returnType optionButton
	m_returnType.add_item('cell value', FastNoiseLite.CellularReturnType.RETURN_CELL_VALUE)
	m_returnType.add_item('distance', FastNoiseLite.CellularReturnType.RETURN_DISTANCE)
	m_returnType.add_item('distance 2', FastNoiseLite.CellularReturnType.RETURN_DISTANCE2)
	m_returnType.add_item('distance 2 add', FastNoiseLite.CellularReturnType.RETURN_DISTANCE2_ADD)
	m_returnType.add_item('distance 2 sub', FastNoiseLite.CellularReturnType.RETURN_DISTANCE2_SUB)
	m_returnType.add_item('distance 2 mul', FastNoiseLite.CellularReturnType.RETURN_DISTANCE2_MUL)
	m_returnType.add_item('distance 2 div', FastNoiseLite.CellularReturnType.RETURN_DISTANCE2_DIV)
	
	# add items to distanceFunction optionButton
	m_distanceFunction.add_item('distance euclidean', FastNoiseLite.CellularDistanceFunction.DISTANCE_EUCLIDEAN)
	m_distanceFunction.add_item('distance euclidean squared', FastNoiseLite.CellularDistanceFunction.DISTANCE_EUCLIDEAN_SQUARED)
	m_distanceFunction.add_item('distance manhattan', FastNoiseLite.CellularDistanceFunction.DISTANCE_MANHATTAN)
	m_distanceFunction.add_item('distance hybrid', FastNoiseLite.CellularDistanceFunction.DISTANCE_HYBRID)
	
	m_jitterLabel.set_text('jitter: ' + str(\"%.3f\" % g_map.m_noise.get_cellular_jitter()))
	
	updateControls()
	
#---------------------------------
func updateControls():
	m_returnType.select(g_map.m_noise.get_cellular_return_type())
	m_distanceFunction.select(g_map.m_noise.get_cellular_distance_function())
	m_jitter.set_value(g_map.m_noise.get_cellular_jitter())

#---------------------------------
func _on_returnType_item_selected(index):
	g_map.m_data.m_cellularReturnType = index
	g_map.generateMap()
	m_returnType.select(g_map.m_noise.get_cellular_return_type())
	
#---------------------------------
func _on_distanceFunction_item_selected(index):
	g_map.m_data.m_cellularDistanceFunction = index
	g_map.generateMap()
	m_distanceFunction.select(g_map.m_noise.get_cellular_distance_function())

#---------------------------------
func _on_jitter_value_changed(value):
	g_map.m_data.m_cellularJitter = value
	g_map.generateMap()
	m_jitterLabel.set_text('jitter: ' + str(\"%.3f\" % g_map.m_noise.get_cellular_jitter()))
"

[sub_resource type="GDScript" id="GDScript_hfi8m"]
script/source = "# Domain.gd
#---------------------------------
class_name DomainWarp extends PanelContainer

#---------------------------------
@onready var g_map: Map = get_tree().root.get_node(\"MainMenu\").get_node(\"MapEditorContainer\").get_node(\"Control\").get_node(\"World\").get_node(\"Map\")

@onready var m_enabled: CheckBox = $\"VBoxContainer/Enabled\"

@onready var m_type: OptionButton = $\"VBoxContainer/Type\"

@onready var m_amplitudeLabel: Label = $\"VBoxContainer/Amplitude/Label\"
@onready var m_amplitude: HSlider = $\"VBoxContainer/Amplitude/HSlider\"

@onready var m_frequencyLabel: Label = $\"VBoxContainer/Frequency/Label\"
@onready var m_frequency: HSlider = $\"VBoxContainer/Frequency/HSlider\"

@onready var m_fractalType: OptionButton = $\"VBoxContainer/FractalType\"

@onready var m_fractalOctavesLabel: Label = $\"VBoxContainer/FractalOctaves/Label\"
@onready var m_fractalOctaves: HSlider = $\"VBoxContainer/FractalOctaves/HSlider\"

@onready var m_fractalGainLabel: Label = $\"VBoxContainer/FractalGain/Label\"
@onready var m_fractalGain: HSlider = $\"VBoxContainer/FractalGain/HSlider\"

@onready var m_fractalLacunarityLabel: Label = $\"VBoxContainer/FractalLacunarity/Label\"
@onready var m_fractalLacunarity: HSlider = $\"VBoxContainer/FractalLacunarity/HSlider\"

#---------------------------------
func _ready():
	# add items to domainWarpType optionButton
	m_type.add_item('simplex', FastNoiseLite.DomainWarpType.DOMAIN_WARP_SIMPLEX)
	m_type.add_item('simplex reduced', FastNoiseLite.DomainWarpType.DOMAIN_WARP_SIMPLEX_REDUCED)
	m_type.add_item('basic grid', FastNoiseLite.DomainWarpType.DOMAIN_WARP_BASIC_GRID)
	
	# init domain warp labels
	m_amplitudeLabel.set_text('amplitude: ' + str(\"%.3f\" % g_map.m_noise.get_domain_warp_amplitude()))
	m_frequencyLabel.set_text('frequency: ' + str(\"%.3f\" % g_map.m_noise.get_domain_warp_frequency()))
	
	# add items to domainWarpFractalType optionButton
	m_fractalType.add_item('fractal none', FastNoiseLite.DomainWarpFractalType.DOMAIN_WARP_FRACTAL_NONE)
	m_fractalType.add_item('fractal progressive', FastNoiseLite.DomainWarpFractalType.DOMAIN_WARP_FRACTAL_PROGRESSIVE)
	m_fractalType.add_item('fractal independent', FastNoiseLite.DomainWarpFractalType.DOMAIN_WARP_FRACTAL_INDEPENDENT)

	# init domain warp fractal labels
	m_fractalOctavesLabel.set_text('octaves: ' + str(\"%.3f\" % g_map.m_noise.get_domain_warp_fractal_octaves()))
	m_fractalGainLabel.set_text('gain: ' + str(\"%.3f\" % g_map.m_noise.get_domain_warp_fractal_gain()))
	m_fractalLacunarityLabel.set_text('lacunarity: ' + str(\"%.3f\" % g_map.m_noise.get_domain_warp_fractal_lacunarity()))
	
	updateControls()

#---------------------------------
func updateControls():
	m_enabled.set_pressed(g_map.m_noise.is_domain_warp_enabled())
	m_type.select(g_map.m_noise.get_domain_warp_type())
	m_amplitude.set_value(g_map.m_noise.get_domain_warp_amplitude())
	m_frequency.set_value(g_map.m_noise.get_domain_warp_frequency())
	
	m_fractalType.select(g_map.m_noise.get_domain_warp_fractal_type())
	m_fractalOctaves.set_value(g_map.m_noise.get_domain_warp_fractal_octaves())
	m_fractalGain.set_value(g_map.m_noise.get_domain_warp_fractal_gain())
	m_fractalLacunarity.set_value(g_map.m_noise.get_domain_warp_fractal_lacunarity())
	
#---------------------------------
func _on_enabled_toggled(button_pressed):
	g_map.m_data.m_domainWarpEnabled = button_pressed
	g_map.generateMap()
	m_enabled.set_pressed(g_map.m_noise.is_domain_warp_enabled())

#---------------------------------
func _on_domainType_item_selected(index):
	g_map.m_data.m_domainType = index
	g_map.generateMap()
	m_type.select(g_map.m_noise.get_domain_warp_type())

#---------------------------------
func _on_amplitude_value_changed(value):
	g_map.m_data.m_domainAmplitude = value
	g_map.generateMap()
	m_amplitudeLabel.set_text('amplitude: ' + str(\"%.3f\" % g_map.m_noise.get_domain_warp_amplitude()))

#---------------------------------
func _on_frequency_value_changed(value):
	g_map.m_data.m_domainFrequency = value
	g_map.generateMap()
	m_frequencyLabel.set_text('frequency: ' + str( \"%.3f\" % g_map.m_noise.get_domain_warp_frequency()))

#---------------------------------
func _on_fractalType_item_selected(index):
	g_map.m_data.m_domainFractalType = index
	g_map.generateMap()
	m_fractalType.select(g_map.m_noise.get_domain_warp_fractal_type())

#---------------------------------
func _on_fractalOctaves_value_changed(value):
	g_map.m_data.m_domainFractalOctaves = value
	g_map.generateMap()
	m_fractalOctavesLabel.set_text('octaves: ' + str(g_map.m_noise.get_domain_warp_fractal_octaves()))

#---------------------------------
func _on_fractalGain_value_changed(value):
	g_map.m_data.m_domainFractalGain = value
	g_map.generateMap()
	m_fractalGainLabel.set_text('gain: ' + str(\"%.3f\" % g_map.m_noise.get_domain_warp_fractal_gain()))

#---------------------------------
func _on_fractalLacunarity_value_changed(value):
	g_map.m_data.m_domainFractalLacunarity = value
	g_map.generateMap()
	m_fractalLacunarityLabel.set_text('lacunarity: ' + str(\"%.3f\" % g_map.m_noise.get_domain_warp_fractal_lacunarity()))
"

[node name="Gui" type="MarginContainer"]
anchors_preset = 9
anchor_bottom = 1.0
offset_right = 200.0
grow_vertical = 2
size_flags_horizontal = 8
size_flags_vertical = 2
theme = SubResource("Theme_5828x")
theme_override_constants/margin_left = 10
theme_override_constants/margin_top = 10
theme_override_constants/margin_right = 10
theme_override_constants/margin_bottom = 10

[node name="VBoxContainer" type="VBoxContainer" parent="."]
layout_mode = 2

[node name="Menu" type="PanelContainer" parent="VBoxContainer"]
layout_mode = 2
theme_override_styles/panel = SubResource("StyleBoxFlat_vx8ye")
script = SubResource("GDScript_3vq2s")

[node name="VBoxContainer" type="VBoxContainer" parent="VBoxContainer/Menu"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="FileName" type="Label" parent="VBoxContainer/Menu/VBoxContainer"]
layout_mode = 2
horizontal_alignment = 1

[node name="HBoxContainer" type="HBoxContainer" parent="VBoxContainer/Menu/VBoxContainer"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="Open" type="Button" parent="VBoxContainer/Menu/VBoxContainer/HBoxContainer"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 0
text = "Open"

[node name="Save" type="Button" parent="VBoxContainer/Menu/VBoxContainer/HBoxContainer"]
layout_mode = 2
size_flags_horizontal = 3
text = "Save"

[node name="FastNoise" type="PanelContainer" parent="VBoxContainer"]
layout_mode = 2
theme_override_styles/panel = SubResource("StyleBoxFlat_vx8ye")
script = SubResource("GDScript_p47q3")

[node name="VBoxContainer" type="VBoxContainer" parent="VBoxContainer/FastNoise"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="Label" type="Label" parent="VBoxContainer/FastNoise/VBoxContainer"]
layout_mode = 2
text = "Noise"
horizontal_alignment = 1

[node name="Layers" type="HBoxContainer" parent="VBoxContainer/FastNoise/VBoxContainer"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="HSlider" type="HSlider" parent="VBoxContainer/FastNoise/VBoxContainer/Layers"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.5
max_value = 6.0

[node name="Label" type="Label" parent="VBoxContainer/FastNoise/VBoxContainer/Layers"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
text = " "

[node name="MapSize" type="HBoxContainer" parent="VBoxContainer/FastNoise/VBoxContainer"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="HSlider" type="HSlider" parent="VBoxContainer/FastNoise/VBoxContainer/MapSize"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.5
max_value = 512.0

[node name="Label" type="Label" parent="VBoxContainer/FastNoise/VBoxContainer/MapSize"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3

[node name="NoiseType" type="OptionButton" parent="VBoxContainer/FastNoise/VBoxContainer"]
layout_mode = 2

[node name="Seed" type="HBoxContainer" parent="VBoxContainer/FastNoise/VBoxContainer"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="HSlider" type="HSlider" parent="VBoxContainer/FastNoise/VBoxContainer/Seed"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.5
max_value = 2000.0

[node name="Label" type="Label" parent="VBoxContainer/FastNoise/VBoxContainer/Seed"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
text = "seed: "

[node name="Frequency" type="HBoxContainer" parent="VBoxContainer/FastNoise/VBoxContainer"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="HSlider" type="HSlider" parent="VBoxContainer/FastNoise/VBoxContainer/Frequency"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.5
max_value = 0.1
step = 0.001
value = 0.01

[node name="Label" type="Label" parent="VBoxContainer/FastNoise/VBoxContainer/Frequency"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
text = "freq: "

[node name="Fractal" type="PanelContainer" parent="VBoxContainer"]
layout_mode = 2
theme_override_styles/panel = SubResource("StyleBoxFlat_vx8ye")
script = SubResource("GDScript_r2nii")

[node name="VBoxContainer" type="VBoxContainer" parent="VBoxContainer/Fractal"]
layout_mode = 2

[node name="Label" type="Label" parent="VBoxContainer/Fractal/VBoxContainer"]
layout_mode = 2
text = "Fractal"
horizontal_alignment = 1

[node name="OptionButton" type="OptionButton" parent="VBoxContainer/Fractal/VBoxContainer"]
layout_mode = 2

[node name="Octaves" type="HBoxContainer" parent="VBoxContainer/Fractal/VBoxContainer"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="HSlider" type="HSlider" parent="VBoxContainer/Fractal/VBoxContainer/Octaves"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.5
max_value = 10.0
rounded = true

[node name="Label" type="Label" parent="VBoxContainer/Fractal/VBoxContainer/Octaves"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3

[node name="Lacunarity" type="HBoxContainer" parent="VBoxContainer/Fractal/VBoxContainer"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="HSlider" type="HSlider" parent="VBoxContainer/Fractal/VBoxContainer/Lacunarity"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.5
max_value = 10.0
step = 0.01

[node name="Label" type="Label" parent="VBoxContainer/Fractal/VBoxContainer/Lacunarity"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3

[node name="Gain" type="HBoxContainer" parent="VBoxContainer/Fractal/VBoxContainer"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="HSlider" type="HSlider" parent="VBoxContainer/Fractal/VBoxContainer/Gain"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.5
max_value = 10.0
step = 0.01

[node name="Label" type="Label" parent="VBoxContainer/Fractal/VBoxContainer/Gain"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3

[node name="Weight" type="HBoxContainer" parent="VBoxContainer/Fractal/VBoxContainer"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="HSlider" type="HSlider" parent="VBoxContainer/Fractal/VBoxContainer/Weight"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.5
max_value = 1.0
step = 0.01
value = 0.01

[node name="Label" type="Label" parent="VBoxContainer/Fractal/VBoxContainer/Weight"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3

[node name="Pingpong" type="HBoxContainer" parent="VBoxContainer/Fractal/VBoxContainer"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="HSlider" type="HSlider" parent="VBoxContainer/Fractal/VBoxContainer/Pingpong"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.5
max_value = 10.0
step = 0.01

[node name="Label" type="Label" parent="VBoxContainer/Fractal/VBoxContainer/Pingpong"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3

[node name="Cellular" type="PanelContainer" parent="VBoxContainer"]
layout_mode = 2
theme_override_styles/panel = SubResource("StyleBoxFlat_vx8ye")
script = SubResource("GDScript_varu0")

[node name="VBoxContainer" type="VBoxContainer" parent="VBoxContainer/Cellular"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="Label" type="Label" parent="VBoxContainer/Cellular/VBoxContainer"]
layout_mode = 2
text = "Cellular"
horizontal_alignment = 1

[node name="ReturnType" type="OptionButton" parent="VBoxContainer/Cellular/VBoxContainer"]
layout_mode = 2

[node name="DistanceFunction" type="OptionButton" parent="VBoxContainer/Cellular/VBoxContainer"]
layout_mode = 2

[node name="Jitter" type="HBoxContainer" parent="VBoxContainer/Cellular/VBoxContainer"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="HSlider" type="HSlider" parent="VBoxContainer/Cellular/VBoxContainer/Jitter"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.5
max_value = 2.0
step = 0.001
value = 0.01

[node name="Label" type="Label" parent="VBoxContainer/Cellular/VBoxContainer/Jitter"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
text = "freq: "

[node name="DomainWarp" type="PanelContainer" parent="VBoxContainer"]
layout_mode = 2
theme_override_styles/panel = SubResource("StyleBoxFlat_vx8ye")
script = SubResource("GDScript_hfi8m")

[node name="VBoxContainer" type="VBoxContainer" parent="VBoxContainer/DomainWarp"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="Label" type="Label" parent="VBoxContainer/DomainWarp/VBoxContainer"]
layout_mode = 2
text = "Domain Warp"
horizontal_alignment = 1

[node name="Enabled" type="CheckBox" parent="VBoxContainer/DomainWarp/VBoxContainer"]
layout_mode = 2
text = "domain warp enabled"

[node name="Type" type="OptionButton" parent="VBoxContainer/DomainWarp/VBoxContainer"]
layout_mode = 2

[node name="Amplitude" type="HBoxContainer" parent="VBoxContainer/DomainWarp/VBoxContainer"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="HSlider" type="HSlider" parent="VBoxContainer/DomainWarp/VBoxContainer/Amplitude"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.5
step = 0.1

[node name="Label" type="Label" parent="VBoxContainer/DomainWarp/VBoxContainer/Amplitude"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
text = "freq: "

[node name="Frequency" type="HBoxContainer" parent="VBoxContainer/DomainWarp/VBoxContainer"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="HSlider" type="HSlider" parent="VBoxContainer/DomainWarp/VBoxContainer/Frequency"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.5
max_value = 1.0
step = 0.001
value = 0.01

[node name="Label" type="Label" parent="VBoxContainer/DomainWarp/VBoxContainer/Frequency"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
text = "freq: "

[node name="FractalType" type="OptionButton" parent="VBoxContainer/DomainWarp/VBoxContainer"]
layout_mode = 2

[node name="FractalOctaves" type="HBoxContainer" parent="VBoxContainer/DomainWarp/VBoxContainer"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="HSlider" type="HSlider" parent="VBoxContainer/DomainWarp/VBoxContainer/FractalOctaves"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.5
max_value = 10.0

[node name="Label" type="Label" parent="VBoxContainer/DomainWarp/VBoxContainer/FractalOctaves"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
text = "freq: "

[node name="FractalGain" type="HBoxContainer" parent="VBoxContainer/DomainWarp/VBoxContainer"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="HSlider" type="HSlider" parent="VBoxContainer/DomainWarp/VBoxContainer/FractalGain"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.5
max_value = 10.0
step = 0.01
value = 0.01

[node name="Label" type="Label" parent="VBoxContainer/DomainWarp/VBoxContainer/FractalGain"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
text = "freq: "

[node name="FractalLacunarity" type="HBoxContainer" parent="VBoxContainer/DomainWarp/VBoxContainer"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="HSlider" type="HSlider" parent="VBoxContainer/DomainWarp/VBoxContainer/FractalLacunarity"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.5
max_value = 10.0
step = 0.01
value = 0.01

[node name="Label" type="Label" parent="VBoxContainer/DomainWarp/VBoxContainer/FractalLacunarity"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
size_flags_horizontal = 3
text = "freq: "

[connection signal="pressed" from="VBoxContainer/Menu/VBoxContainer/HBoxContainer/Open" to="VBoxContainer/Menu" method="_on_open_pressed"]
[connection signal="pressed" from="VBoxContainer/Menu/VBoxContainer/HBoxContainer/Save" to="VBoxContainer/Menu" method="_on_save_pressed"]
[connection signal="value_changed" from="VBoxContainer/FastNoise/VBoxContainer/Layers/HSlider" to="VBoxContainer/FastNoise" method="_on_layers_value_changed"]
[connection signal="value_changed" from="VBoxContainer/FastNoise/VBoxContainer/MapSize/HSlider" to="VBoxContainer/FastNoise" method="_on_mapSize_value_changed"]
[connection signal="item_selected" from="VBoxContainer/FastNoise/VBoxContainer/NoiseType" to="VBoxContainer/FastNoise" method="_on_noiseType_item_selected"]
[connection signal="value_changed" from="VBoxContainer/FastNoise/VBoxContainer/Seed/HSlider" to="VBoxContainer/FastNoise" method="_on_seed_value_changed"]
[connection signal="value_changed" from="VBoxContainer/FastNoise/VBoxContainer/Frequency/HSlider" to="VBoxContainer/FastNoise" method="_on_frequency_value_changed"]
[connection signal="item_selected" from="VBoxContainer/Fractal/VBoxContainer/OptionButton" to="VBoxContainer/Fractal" method="_on_fractalType_item_selected"]
[connection signal="value_changed" from="VBoxContainer/Fractal/VBoxContainer/Octaves/HSlider" to="VBoxContainer/Fractal" method="_on_octave_value_changed"]
[connection signal="value_changed" from="VBoxContainer/Fractal/VBoxContainer/Lacunarity/HSlider" to="VBoxContainer/Fractal" method="_on_lacunarity_value_changed"]
[connection signal="value_changed" from="VBoxContainer/Fractal/VBoxContainer/Gain/HSlider" to="VBoxContainer/Fractal" method="_on_gain_value_changed"]
[connection signal="value_changed" from="VBoxContainer/Fractal/VBoxContainer/Weight/HSlider" to="VBoxContainer/Fractal" method="_on_weight_value_changed"]
[connection signal="value_changed" from="VBoxContainer/Fractal/VBoxContainer/Pingpong/HSlider" to="VBoxContainer/Fractal" method="_on_pingpong_value_changed"]
[connection signal="item_selected" from="VBoxContainer/Cellular/VBoxContainer/ReturnType" to="VBoxContainer/Cellular" method="_on_returnType_item_selected"]
[connection signal="item_selected" from="VBoxContainer/Cellular/VBoxContainer/DistanceFunction" to="VBoxContainer/Cellular" method="_on_distanceFunction_item_selected"]
[connection signal="value_changed" from="VBoxContainer/Cellular/VBoxContainer/Jitter/HSlider" to="VBoxContainer/Cellular" method="_on_jitter_value_changed"]
[connection signal="toggled" from="VBoxContainer/DomainWarp/VBoxContainer/Enabled" to="VBoxContainer/DomainWarp" method="_on_enabled_toggled"]
[connection signal="item_selected" from="VBoxContainer/DomainWarp/VBoxContainer/Type" to="VBoxContainer/DomainWarp" method="_on_domainType_item_selected"]
[connection signal="value_changed" from="VBoxContainer/DomainWarp/VBoxContainer/Amplitude/HSlider" to="VBoxContainer/DomainWarp" method="_on_amplitude_value_changed"]
[connection signal="value_changed" from="VBoxContainer/DomainWarp/VBoxContainer/Frequency/HSlider" to="VBoxContainer/DomainWarp" method="_on_frequency_value_changed"]
[connection signal="item_selected" from="VBoxContainer/DomainWarp/VBoxContainer/FractalType" to="VBoxContainer/DomainWarp" method="_on_fractalType_item_selected"]
[connection signal="value_changed" from="VBoxContainer/DomainWarp/VBoxContainer/FractalOctaves/HSlider" to="VBoxContainer/DomainWarp" method="_on_fractalOctaves_value_changed"]
[connection signal="value_changed" from="VBoxContainer/DomainWarp/VBoxContainer/FractalGain/HSlider" to="VBoxContainer/DomainWarp" method="_on_fractalGain_value_changed"]
[connection signal="value_changed" from="VBoxContainer/DomainWarp/VBoxContainer/FractalLacunarity/HSlider" to="VBoxContainer/DomainWarp" method="_on_fractalLacunarity_value_changed"]
